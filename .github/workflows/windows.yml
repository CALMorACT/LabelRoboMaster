name: Windows
on:
  # push代码时触发workflow
  push:
    paths:
      - "*.cpp"
      - ".github/workflows/windows.yml"
      - "CMakeLists.txt"
  pull_request:
    paths:
      - "*.cpp"
      - ".github/workflows/windows.yml"
      - "CMakeLists.txt"
jobs:
  build:
    name: Build
    # 运行平台， windows-latest目前是windows server 2019
    # 参考文档 https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-2019
    strategy:
      # 矩阵配置
      matrix:
        include:
          # 5.15.2 参考 https://mirrors.cloud.tencent.com/qt/online/qtsdkrepository/windows_x86/desktop/qt5_5152/
          - qt_ver: 5.15.2
            qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            use_openvino: opencv
          - qt_ver: 5.15.2
            qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            use_openvino: openvino
          - qt_ver: 5.12.10
            qt_arch: win64_msvc2017_64
            msvc_arch: x64
            qt_arch_install: msvc2017_64
            use_openvino: opencv
          - qt_ver: 5.12.10
            qt_arch: win64_msvc2017_64
            msvc_arch: x64
            qt_arch_install: msvc2017_64
            use_openvino: openvino
    env:
      targetName: LabelRoboMaster.exe
    # 步骤
    steps:
      # 拉取代码
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install Qt
        # 使用外部action。这个action专门用来安装Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          # target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: "false"
      - name: Install OpenCV
        shell: pwsh
        if: ${{ matrix.use_openvino == 'opencv' }}
        run: |
          Invoke-WebRequest -Uri "https://github.com/opencv/opencv/releases/download/4.5.3/opencv-4.5.3-vc14_vc15.exe" -OutFile "OpenCVI.7z"
          7z x "OpenCVI.7z" -oOpenCV
          echo ("OpenCV_DIR=" + "$pwd/OpenCV/opencv/build") | Out-File -FilePath $env:GITHUB_env -Encoding utf8 -Append
      - name: Install Openvino
        shell: pwsh
        if: ${{ matrix.use_openvino == 'openvino' }}
        run: |
          Invoke-WebRequest -Uri "https://hola.obs.cn-north-4.myhuaweicloud.com/openvino_com.zip" -OutFile "OpenCVI.zip"
          7z x "OpenCVI.zip" -oOpenvino
          echo ("OpenCV_DIR=" + "${pwd}/Openvino/openvino_2021.4.689/opencv/cmake") | Out-File -FilePath $env:GITHUB_env -Encoding utf8 -Append
      - name: Install MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019
          toolset: 14.2
          arch: ${{ matrix.msvc_arch }}
      # msvc编译
      - name: msvc-build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          mkdir build
          cd build
          cmake -G "NMake Makefiles" .. -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          nmake
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
      # 打包
      - name: package
        id: package
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}-${{ matrix.use_openvino }}
          msvcArch: ${{ matrix.msvc_arch }}
        shell: pwsh
        run: |
          cd build
          ..\scripts\windows-publish.ps1 ${env:archiveName} ${env:targetName}
          # 记录packageName给后续step
          $name = ${env:archiveName}
          echo "::set-output name=packageName::$name"
      # tag 查询github-Release
      # 上传artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ steps.package.outputs.packageName }}.zip
      # tag 上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true
